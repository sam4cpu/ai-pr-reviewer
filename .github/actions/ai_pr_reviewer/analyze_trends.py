import os
import json
from datetime import datetime
from statistics import mean

def load_all_summaries(directory="."):
    """Load all review_summary.json files from artifacts or history."""
    summaries = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file == "review_summary.json":
                path = os.path.join(root, file)
                try:
                    with open(path, "r", encoding="utf-8") as f:
                        data = json.load(f)
                        summaries.append(data)
                except Exception as e:
                    print(f"[WARN] Failed to load {path}: {e}")
    print(f"[INFO] Loaded {len(summaries)} summaries.")
    return summaries


def compute_trends(summaries):
    """Compute average metrics and detect risk evolution."""
    if not summaries:
        return {"error": "No data found for trend analysis."}

    confidence_scores = [s["confidence_score"] for s in summaries if "confidence_score" in s]
    issue_counts = [s["potential_issues"] for s in summaries if "potential_issues" in s]
    suggestion_counts = [s["suggestions"] for s in summaries if "suggestions" in s]

    avg_confidence = round(mean(confidence_scores), 2) if confidence_scores else 0
    avg_issues = round(mean(issue_counts), 2) if issue_counts else 0
    avg_suggestions = round(mean(suggestion_counts), 2) if suggestion_counts else 0

    recent_risks = sum(1 for s in summaries if s.get("high_risk_terms"))
    risk_ratio = round(recent_risks / len(summaries) * 100, 1) if summaries else 0

    return {
        "total_reviews": len(summaries),
        "avg_confidence": avg_confidence,
        "avg_issues": avg_issues,
        "avg_suggestions": avg_suggestions,
        "risk_ratio": risk_ratio,
        "last_updated": datetime.utcnow().isoformat() + "Z",
    }


def save_trend_report(metrics, output_path="trend_report.md"):
    """Generate markdown summary for trend analytics."""
    if "error" in metrics:
        print("[WARN] No valid data for trend generation.")
        return

    md_content = f"""#  AI PR Review Trend Report

**Last Updated:** {metrics['last_updated']}

| Metric | Value |
|--------|--------|
| Total Reviews | {metrics['total_reviews']} |
| Avg Confidence | {metrics['avg_confidence']} |
| Avg Issues | {metrics['avg_issues']} |
| Avg Suggestions | {metrics['avg_suggestions']} |
| Risk Ratio (%) | {metrics['risk_ratio']} |

---

###  Observations
- Confidence scores show how reliable recent reviews have been.
- Risk Ratio indicates the frequency of critical terms like “security” or “crash”.
- Use this data to refine review prompts, coding standards, or CI quality gates.

---

_This report was automatically generated by the AI PR Reviewer (Day 10)._
"""
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(md_content)
    print(f"[SUCCESS] Trend report saved to {output_path}")


def main():
    print("[START] Running Cross-PR Analytics...")
    summaries = load_all_summaries(".")
    metrics = compute_trends(summaries)
    save_trend_report(metrics)


if __name__ == "__main__":
    main()
