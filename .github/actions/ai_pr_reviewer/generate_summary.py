import os
import json
import re
from datetime import datetime

def extract_section(text, header):
    """Extract a markdown section by its header."""
    pattern = rf"##+ {header}[\s\S]*?(?=\n##|\Z)"
    match = re.search(pattern, text, re.IGNORECASE)
    return match.group(0).strip() if match else f"_{header} section missing_"

def count_bullets(section_text):
    """Count markdown bullets for quick scoring."""
    return len(re.findall(r"^- ", section_text, flags=re.MULTILINE))

def compute_confidence_score(summary, issues, suggestions):
    """Simple confidence heuristic."""
    length_factor = len(summary) / 200
    balance = abs(count_bullets(issues) - count_bullets(suggestions))
    score = 100 - (balance * 5) - (10 if "missing" in summary else 0)
    return max(30, min(95, int(score * (1 if length_factor > 0.8 else 0.8))))

def main():
    review_path = "artifacts/ai_review.md"
    if not os.path.exists(review_path):
        print("[FATAL] No ai_review.md found â€” ensure artifacts are downloaded.")
        return

    print(f"[INFO] Reading AI review from {review_path}...")
    with open(review_path, "r", encoding="utf-8") as f:
        review_text = f.read()

    summary = extract_section(review_text, "Summary")
    issues = extract_section(review_text, "Potential Issues")
    suggestions = extract_section(review_text, "Suggestions")
    tests = extract_section(review_text, "Testing Recommendations")

    # --- Analytics ---
    bullet_issues = count_bullets(issues)
    bullet_suggestions = count_bullets(suggestions)
    score = compute_confidence_score(summary, issues, suggestions)

    summary_data = {
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "summary": summary,
        "potential_issues": bullet_issues,
        "suggestions": bullet_suggestions,
        "confidence_score": score,
    }

    # --- Save summary ---
    with open("review_summary.json", "w", encoding="utf-8") as jf:
        json.dump(summary_data, jf, indent=2)
    print("[INFO] Saved structured summary to review_summary.json")

    # --- Generate Markdown summary ---
    md_content = f"""##  AI Review Summary

**Confidence Score:** {score}/100  
**Detected Issues:** {bullet_issues}  
**Suggestions:** {bullet_suggestions}

### Summary
{summary}

### Potential Issues
{issues}

### Suggestions
{suggestions}

### Testing Recommendations
{tests}

---

_This summary was automatically generated by the AI PR Reviewer workflow._
"""
    with open("review_summary.md", "w", encoding="utf-8") as mf:
        mf.write(md_content)
    print("[SUCCESS] review_summary.md generated successfully.")

if __name__ == "__main__":
    main()

